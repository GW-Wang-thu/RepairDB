# Generated by Django 4.1.2 on 2023-06-09 06:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DefectInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "component",
                    models.SmallIntegerField(
                        choices=[
                            (0, "前轮"),
                            (1, "挡泥板"),
                            (2, "后座"),
                            (3, "车把"),
                            (4, "刹车"),
                        ],
                        verbose_name="部件",
                    ),
                ),
                (
                    "part",
                    models.SmallIntegerField(
                        choices=[
                            (0, "左上壁板"),
                            (1, "左下壁板"),
                            (2, "右上壁板"),
                            (3, "右下壁板"),
                            (4, "左左壁板"),
                            (5, "左右壁板"),
                            (6, "右左壁板"),
                            (7, "右右壁板"),
                            (8, "左左蒙皮"),
                            (9, "左右蒙皮"),
                            (10, "右左蒙皮"),
                            (11, "右右蒙皮"),
                            (12, "左上盖板"),
                            (13, "左下盖板"),
                            (14, "右上盖板"),
                            (15, "右下盖板"),
                        ],
                        verbose_name="零件",
                    ),
                ),
                (
                    "location_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "口框区域"),
                            (1, "连接区域"),
                            (2, "蜂窝区域"),
                            (3, "长桁端头"),
                            (4, "边缘区域"),
                            (5, "其他区域"),
                        ],
                        verbose_name="区域类型",
                    ),
                ),
                (
                    "defect_origin",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(0, "原始损伤"), (1, "新增损伤"), (2, "延续损伤"), (3, "扩展损伤")],
                        verbose_name="损伤起始",
                    ),
                ),
                (
                    "location_z_ref",
                    models.SmallIntegerField(
                        choices=[
                            (0, "1墙轴线"),
                            (1, "2墙轴线"),
                            (2, "3墙轴线"),
                            (3, "前缘"),
                            (4, "后缘"),
                            (5, "1梁轴线"),
                            (6, "2梁轴线"),
                            (7, "梁轴线"),
                            (8, "后墙"),
                        ],
                        verbose_name="展向基准",
                    ),
                ),
                (
                    "location_z_direc",
                    models.BooleanField(
                        choices=[(0, "上"), (1, "下")], default=0, verbose_name="相对位置"
                    ),
                ),
                ("location_z_dist", models.IntegerField(verbose_name="距离(mm)")),
                (
                    "location_x_ref",
                    models.SmallIntegerField(
                        choices=[
                            (0, "1墙轴线"),
                            (1, "2墙轴线"),
                            (2, "3墙轴线"),
                            (3, "前缘"),
                            (4, "后缘"),
                            (5, "1梁轴线"),
                            (6, "2梁轴线"),
                            (7, "梁轴线"),
                            (8, "后墙"),
                        ],
                        verbose_name="展向基准",
                    ),
                ),
                (
                    "location_x_direc",
                    models.BooleanField(
                        choices=[(0, "左"), (1, "右")], default=0, verbose_name="相对位置"
                    ),
                ),
                ("location_x_dist", models.IntegerField(verbose_name="距离(mm)")),
                (
                    "location_thickness",
                    models.CharField(max_length=32, verbose_name="厚度分布"),
                ),
                ("size_z", models.IntegerField(verbose_name="展向损伤尺度(mm)")),
                ("size_x", models.IntegerField(verbose_name="弦向损伤尺度(mm)")),
                (
                    "defect_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "分层"),
                            (1, "长桁脱粘"),
                            (2, "低速冲击损伤（穿透/非穿透型冲击孔）"),
                            (3, "高速冲击损伤（穿透/非穿透型冲击孔）"),
                            (4, "蜂窝进水（蜂窝结构内部进水）"),
                            (5, "表面割裂损伤或深划痕（面板表面若干层被割伤）"),
                            (6, "腐蚀/老化（基体或纤维材料老化腐蚀失效）"),
                            (7, "雷击损伤"),
                            (8, "功能结构损伤（涂层老化脱落等导致的吸波功能减退等）"),
                        ],
                        verbose_name="缺陷类型",
                    ),
                ),
                (
                    "defect_status",
                    models.SmallIntegerField(
                        choices=[(0, "无需修理"), (1, "等待修理"), (2, "修理完毕"), (3, "等待决策")],
                        default=1,
                        verbose_name="缺陷状态",
                    ),
                ),
                (
                    "pre_defect",
                    models.IntegerField(blank=True, default=0, verbose_name="上一缺陷"),
                ),
                (
                    "next_defect",
                    models.IntegerField(blank=True, default=0, verbose_name="下一缺陷"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DMAPDataInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_title", models.CharField(max_length=255, verbose_name="数据标题")),
                (
                    "data_description",
                    models.TextField(blank=True, null=True, verbose_name="数据描述"),
                ),
                (
                    "structure_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "层合板"),
                            (1, "蜂窝结构"),
                            (2, "加筋结构"),
                            (3, "挖补/贴补/螺栓修复结构"),
                        ],
                        verbose_name="损伤结构",
                    ),
                ),
                (
                    "ndt_method",
                    models.SmallIntegerField(
                        choices=[
                            (0, "目视检测"),
                            (1, "超声C扫+A扫"),
                            (2, "主动热成像"),
                            (3, "X-CT"),
                            (4, "激光剪切散斑"),
                            (5, "形貌重建"),
                            (6, "其他方法"),
                        ],
                        verbose_name="无损检测方法",
                    ),
                ),
                (
                    "damage_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "蒙皮分层（可能由于制造原因、载荷集中、低速冲击、老化疲劳等导致的不明原因分层）"),
                            (1, "长桁分层（可能由于制造原因、载荷集中、低速冲击、老化疲劳等导致的长桁分层）"),
                            (2, "蒙皮-芯材/长桁/筋条胶接面脱粘（蜂窝或加筋结构蒙皮-芯材/筋连接处脱粘）"),
                            (3, "蜂窝进水（蜂窝结构内部进水）"),
                            (4, "表面割裂损伤或深划痕（面板表面若干层被割伤）"),
                            (5, "腐蚀/老化（蜂窝芯，或基体、纤维材料老化腐蚀失效）"),
                            (6, "雷击损伤"),
                            (7, "功能损伤（涂层老化脱落等导致的吸波功能减退等）"),
                            (8, "制造缺陷（夹杂、纤维堆叠、褶皱等）"),
                            (9, "过载断裂（超载、碰撞等局部应力过大导致的断裂）"),
                            (10, "低速冲击损伤（表面凹痕、内部分层及裂纹）"),
                            (11, "高速冲击损伤（穿透/非穿透型冲击孔）"),
                            (12, "其他损伤"),
                        ],
                        verbose_name="损伤类型",
                    ),
                ),
                ("img", models.ImageField(upload_to="DMAP", verbose_name="损伤图片")),
            ],
        ),
        migrations.CreateModel(
            name="JetInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "jet_type",
                    models.SmallIntegerField(
                        choices=[(0, "J11"), (1, "J11BS"), (2, "J16"), (3, "d")],
                        default=0,
                        verbose_name="战机型号",
                    ),
                ),
                (
                    "jet_serial",
                    models.CharField(max_length=255, unique=True, verbose_name="战机编号"),
                ),
                (
                    "jet_serve_region",
                    models.CharField(max_length=255, verbose_name="服役地点"),
                ),
                (
                    "jet_service_start_time",
                    models.DateTimeField(verbose_name="战机入列年月日"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MaintainRecInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "record_name",
                    models.CharField(max_length=255, unique=True, verbose_name="维护名称"),
                ),
                (
                    "record_type",
                    models.SmallIntegerField(
                        choices=[(0, "大修"), (1, "定检"), (2, "大过载检修")],
                        default=0,
                        verbose_name="维护类型",
                    ),
                ),
                ("flight_time", models.FloatField(default=0.0, verbose_name="飞行战机时间")),
                ("start_date", models.DateField(verbose_name="维护开始日期")),
                (
                    "jet_serial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="RepairDB.jetinfo",
                        to_field="jet_serial",
                        verbose_name="战机序列号",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ecard_id",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="工号"
                    ),
                ),
                ("username", models.CharField(max_length=255, verbose_name="用户名")),
                ("mail", models.CharField(max_length=255, verbose_name="邮箱")),
                ("passwd", models.CharField(max_length=64, verbose_name="密码")),
                (
                    "rights",
                    models.CharField(default="0,", max_length=255, verbose_name="用户权限"),
                ),
                ("join_date", models.DateTimeField(verbose_name="注册时间")),
                (
                    "task_numbers",
                    models.IntegerField(default=0, verbose_name="待处理任务数量"),
                ),
                (
                    "applying_tasks",
                    models.CharField(
                        default="", max_length=255, verbose_name="正在申请的事项"
                    ),
                ),
                (
                    "approving_tasks",
                    models.CharField(
                        default="", max_length=255, verbose_name="正在处理的事项"
                    ),
                ),
                (
                    "finished_tasks",
                    models.CharField(
                        default="", max_length=255, verbose_name="处理完毕的事项"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemplateInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "template_title",
                    models.CharField(max_length=255, verbose_name="模板标题"),
                ),
                (
                    "template_type",
                    models.SmallIntegerField(
                        choices=[(0, "无损检测模板"), (1, "修复数据模板"), (2, "仿真数据模板")],
                        default=0,
                        verbose_name="数据模板类型",
                    ),
                ),
                (
                    "template_description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="模板描述"
                    ),
                ),
                (
                    "template_status",
                    models.SmallIntegerField(
                        choices=[(0, "待审"), (1, "有效"), (2, "作废")], verbose_name="模板状态"
                    ),
                ),
                (
                    "template_item",
                    models.JSONField(blank=True, null=True, verbose_name="模板条目"),
                ),
                (
                    "template_approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_approver",
                        to="RepairDB.userinfo",
                        verbose_name="审批者",
                    ),
                ),
                (
                    "template_creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_creator",
                        to="RepairDB.userinfo",
                        verbose_name="创建者",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Taskinfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "数据上传"),
                            (1, "数据上传审核"),
                            (2, "用户权限申请"),
                            (3, "用户权限申请审核"),
                            (4, "数据模板创建申请"),
                            (5, "数据模板审核"),
                            (6, "数据使用申请"),
                            (7, "数据使用审核"),
                        ],
                        verbose_name="任务类别",
                    ),
                ),
                (
                    "task_status",
                    models.SmallIntegerField(
                        choices=[
                            (0, "处理中"),
                            (1, "审批通过"),
                            (2, "申请被驳回"),
                            (3, "用户撤销申请"),
                            (4, "待提交"),
                            (5, "超时未处理驳回"),
                        ],
                        verbose_name="任务状态",
                    ),
                ),
                ("task_title", models.CharField(max_length=255, verbose_name="任务标题")),
                (
                    "task_description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="任务描述"
                    ),
                ),
                ("task_create_time", models.DateTimeField(verbose_name="任务创建时间")),
                (
                    "task_decision_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="任务完成时间"),
                ),
                ("task_content", models.JSONField(verbose_name="任务信息")),
                (
                    "task_applier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="task_creator",
                        to="RepairDB.userinfo",
                        verbose_name="创建者",
                    ),
                ),
                (
                    "task_approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="task_approver",
                        to="RepairDB.userinfo",
                        verbose_name="审批者",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SIMUDataInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_title", models.CharField(max_length=255, verbose_name="数据标题")),
                (
                    "data_description",
                    models.TextField(blank=True, null=True, verbose_name="数据描述"),
                ),
                (
                    "simulation_software",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Abaqus"),
                            (1, "Adams"),
                            (2, "Fluent"),
                            (3, "COMSOL"),
                            (4, "其他"),
                        ],
                        verbose_name="仿真软件",
                    ),
                ),
                (
                    "structure_object",
                    models.SmallIntegerField(
                        choices=[(0, "层合板"), (1, "蜂窝结构"), (2, "加筋结构"), (3, "吸波结构")],
                        verbose_name="模拟对象",
                    ),
                ),
                (
                    "structure_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "完好结构"),
                            (1, "贴补修复结构"),
                            (2, "挖补修复结构"),
                            (3, "预置缺陷结构"),
                        ],
                        verbose_name="结构类型",
                    ),
                ),
                (
                    "load_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "单拉（典型拉伸载荷）"),
                            (1, "单压（典型压缩载荷）"),
                            (2, "弯曲（三点弯、四点弯、面内静水压强等）"),
                            (3, "剪切（面内剪切）"),
                            (4, "低速冲击（落锤冲击损伤仿真）"),
                            (5, "高速冲击（高速冲击损伤仿真）"),
                            (6, "固化工艺仿真（固化热动力学仿真）"),
                            (7, "加工工艺仿真（钻孔、打磨、钉铆等工艺仿真）"),
                            (8, "混合型载荷（拉压弯扭剪等耦合，CAI模拟等）"),
                            (9, "功能结构仿真（电磁特性仿真等）"),
                            (10, "热仿真"),
                            (11, "其他"),
                        ],
                        verbose_name="载荷类型",
                    ),
                ),
                (
                    "result_file_path",
                    models.CharField(max_length=255, verbose_name="结果图片或视频"),
                ),
                (
                    "demo_img",
                    models.ImageField(upload_to="SIMUMAP/IMGS", verbose_name="示例图片"),
                ),
                (
                    "demo_video",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="SIMUMAP/VIDEO",
                        verbose_name="结果视频",
                    ),
                ),
                (
                    "origin_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="SIMUMAP/ATTACH",
                        verbose_name="仿真文件",
                    ),
                ),
                (
                    "data_creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="simu_data_creator",
                        to="RepairDB.userinfo",
                        verbose_name="数据创建者",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="REPDataInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data_title", models.CharField(max_length=255, verbose_name="数据标题")),
                (
                    "data_description",
                    models.TextField(blank=True, null=True, verbose_name="数据描述"),
                ),
                (
                    "rep_method",
                    models.SmallIntegerField(
                        choices=[
                            (0, "复合材料结构挖补修复"),
                            (1, "复合材料结构贴补修复"),
                            (2, "螺栓补板修复"),
                            (3, "零备件更换"),
                        ],
                        verbose_name="无损检测方法",
                    ),
                ),
                (
                    "data_status",
                    models.SmallIntegerField(
                        choices=[(0, "待审"), (1, "有效"), (2, "作废")], verbose_name="数据状态"
                    ),
                ),
                ("img_path", models.CharField(max_length=255, verbose_name="图片文件名")),
                ("data_item_all", models.JSONField(verbose_name="数据内容")),
                (
                    "data_approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rep_data_approver",
                        to="RepairDB.userinfo",
                        verbose_name="数据审批者",
                    ),
                ),
                (
                    "data_creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rep_data_creator",
                        to="RepairDB.userinfo",
                        verbose_name="数据创建者",
                    ),
                ),
                (
                    "data_template",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"template_status": 1, "template_type": 1},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="RepairDB.templateinfo",
                        verbose_name="数据模板",
                    ),
                ),
                (
                    "defect",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"defect_status": 1},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="RepairDB.defectinfo",
                        verbose_name="针对缺陷",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NDTDataInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ndt_method",
                    models.SmallIntegerField(
                        choices=[
                            (0, "目视检测"),
                            (1, "超声C扫+A扫"),
                            (2, "主动热成像"),
                            (3, "X-CT"),
                            (4, "激光剪切散斑"),
                            (5, "形貌重建"),
                            (6, "其他方法"),
                        ],
                        verbose_name="无损检测方法",
                    ),
                ),
                (
                    "component",
                    models.SmallIntegerField(
                        choices=[
                            (0, "前轮"),
                            (1, "挡泥板"),
                            (2, "后座"),
                            (3, "车把"),
                            (4, "刹车"),
                        ],
                        verbose_name="部件",
                    ),
                ),
                (
                    "part",
                    models.SmallIntegerField(
                        choices=[
                            (0, "左上壁板"),
                            (1, "左下壁板"),
                            (2, "右上壁板"),
                            (3, "右下壁板"),
                            (4, "左左壁板"),
                            (5, "左右壁板"),
                            (6, "右左壁板"),
                            (7, "右右壁板"),
                            (8, "左左蒙皮"),
                            (9, "左右蒙皮"),
                            (10, "右左蒙皮"),
                            (11, "右右蒙皮"),
                            (12, "左上盖板"),
                            (13, "左下盖板"),
                            (14, "右上盖板"),
                            (15, "右下盖板"),
                        ],
                        verbose_name="零件",
                    ),
                ),
                (
                    "defect_origin",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(0, "原始损伤"), (1, "新增损伤"), (2, "延续损伤"), (3, "扩展损伤")],
                        verbose_name="损伤起始",
                    ),
                ),
                (
                    "location_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "口框区域"),
                            (1, "连接区域"),
                            (2, "蜂窝区域"),
                            (3, "长桁端头"),
                            (4, "边缘区域"),
                            (5, "其他区域"),
                        ],
                        verbose_name="区域类型",
                    ),
                ),
                (
                    "location_z_ref",
                    models.SmallIntegerField(
                        choices=[
                            (0, "1墙轴线"),
                            (1, "2墙轴线"),
                            (2, "3墙轴线"),
                            (3, "前缘"),
                            (4, "后缘"),
                            (5, "1梁轴线"),
                            (6, "2梁轴线"),
                            (7, "梁轴线"),
                            (8, "后墙"),
                        ],
                        verbose_name="展向基准",
                    ),
                ),
                (
                    "location_z_direc",
                    models.BooleanField(
                        choices=[(0, "上"), (1, "下")], default=0, verbose_name="相对位置"
                    ),
                ),
                ("location_z_dist", models.IntegerField(verbose_name="距离(mm)")),
                (
                    "location_x_ref",
                    models.SmallIntegerField(
                        choices=[
                            (0, "1墙轴线"),
                            (1, "2墙轴线"),
                            (2, "3墙轴线"),
                            (3, "前缘"),
                            (4, "后缘"),
                            (5, "1梁轴线"),
                            (6, "2梁轴线"),
                            (7, "梁轴线"),
                            (8, "后墙"),
                        ],
                        verbose_name="展向基准",
                    ),
                ),
                (
                    "location_x_direc",
                    models.BooleanField(
                        choices=[(0, "左"), (1, "右")], default=0, verbose_name="相对位置"
                    ),
                ),
                ("location_x_dist", models.IntegerField(verbose_name="距离(mm)")),
                (
                    "location_thickness",
                    models.CharField(max_length=32, verbose_name="厚度分布"),
                ),
                ("size_z", models.IntegerField(verbose_name="展向损伤尺度(mm)")),
                ("size_x", models.IntegerField(verbose_name="弦向损伤尺度(mm)")),
                (
                    "defect_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "分层"),
                            (1, "长桁脱粘"),
                            (2, "低速冲击损伤（穿透/非穿透型冲击孔）"),
                            (3, "高速冲击损伤（穿透/非穿透型冲击孔）"),
                            (4, "蜂窝进水（蜂窝结构内部进水）"),
                            (5, "表面割裂损伤或深划痕（面板表面若干层被割伤）"),
                            (6, "腐蚀/老化（基体或纤维材料老化腐蚀失效）"),
                            (7, "雷击损伤"),
                            (8, "功能结构损伤（涂层老化脱落等导致的吸波功能减退等）"),
                        ],
                        verbose_name="缺陷类型",
                    ),
                ),
                (
                    "attachment_file_path",
                    models.FileField(
                        blank=True,
                        upload_to="D:\\Codes\\RepairDB\\RepairDatabase_v2\\files\\NDT\\\\%Y/%m/%d/",
                    ),
                ),
                (
                    "data_creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ndt_data_creator",
                        to="RepairDB.userinfo",
                        verbose_name="数据创建者",
                    ),
                ),
                (
                    "defect_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="RepairDB.defectinfo",
                        verbose_name="关联已有缺陷",
                    ),
                ),
                (
                    "maintain_rec",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="RepairDB.maintainrecinfo",
                        verbose_name="维护记录",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Logininfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_time", models.DateTimeField(verbose_name="登录日期")),
                (
                    "login_ip",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="登录ip"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="RepairDB.userinfo",
                        verbose_name="用户名",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="defectinfo",
            name="defect_fix_record",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="RepairDB.repdatainfo",
                verbose_name="缺陷修复记录",
            ),
        ),
        migrations.AddField(
            model_name="defectinfo",
            name="defect_ndt_record",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="RepairDB.ndtdatainfo",
                verbose_name="缺陷检出的无损检测记录",
            ),
        ),
        migrations.AddField(
            model_name="defectinfo",
            name="maintain_rec",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="RepairDB.maintainrecinfo",
                verbose_name="维护记录",
            ),
        ),
    ]
